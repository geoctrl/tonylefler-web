// vite.config.ts
import { vitePlugin as remix } from "file:///Users/tonylefler/projects/tonylefler-web/node_modules/@remix-run/dev/dist/index.js";
import { defineConfig } from "file:///Users/tonylefler/projects/tonylefler-web/node_modules/vite/dist/node/index.js";
import tsconfigPaths from "file:///Users/tonylefler/projects/tonylefler-web/node_modules/vite-tsconfig-paths/dist/index.js";
import mdx from "file:///Users/tonylefler/projects/tonylefler-web/node_modules/@mdx-js/rollup/index.js";
import path from "path";

// rehype-shiki.ts
import {
  createHighlighter
} from "file:///Users/tonylefler/projects/tonylefler-web/node_modules/shiki/dist/index.mjs";
import rehypeParse from "file:///Users/tonylefler/projects/tonylefler-web/node_modules/rehype-parse/index.js";
import { visit } from "file:///Users/tonylefler/projects/tonylefler-web/node_modules/unist-util-visit/index.js";
import { toString } from "file:///Users/tonylefler/projects/tonylefler-web/node_modules/hast-util-to-string/index.js";
import { unified } from "file:///Users/tonylefler/projects/tonylefler-web/node_modules/unified/index.js";
import rehypeStringify from "file:///Users/tonylefler/projects/tonylefler-web/node_modules/rehype-stringify/index.js";
var highlighterTsx;
var highlighterScss;
async function getHighlighterTsx() {
  if (!highlighterTsx) {
    return highlighterTsx = await createHighlighter({
      langs: ["tsx"],
      themes: ["github-dark", "github-light"]
    });
  } else {
    return highlighterTsx;
  }
}
async function getHighlighterScss() {
  if (!highlighterScss) {
    return highlighterScss = await createHighlighter({
      langs: ["scss"],
      themes: ["github-dark", "github-light"]
    });
  } else {
    return highlighterScss;
  }
}
function highlight(code, lang, highlighter) {
  return highlighter.codeToHtml(code, {
    lang,
    themes: {
      light: "github-light",
      dark: "github-dark"
    }
  });
}
function rehypeShiki() {
  return async (tree) => {
    const highlighterTsx2 = await getHighlighterTsx();
    const highlighterScss2 = await getHighlighterScss();
    visit(tree, "element", (node) => {
      const className = node?.children?.[0]?.properties?.className?.[0];
      const highlighter = {
        "language-tsx": highlighterTsx2,
        "language-scss": highlighterScss2
      }[className];
      if (node.tagName === "pre" && highlighter) {
        const lang = className.replace("language-", "");
        const html = highlight(toString(node), lang, highlighter);
        const rehypeTree = unified().use(rehypeParse, { fragment: true }).use(rehypeStringify).parse(html);
        const el = rehypeTree.children[0];
        node.type = el.type;
        node.tagName = el.tagName;
        node.properties = el.properties;
        node.children = el.children;
      } else if (node.tagName === "pre") {
        node.properties.className = ["simple"];
      }
    });
  };
}

// vite.config.ts
import rehypeSlug from "file:///Users/tonylefler/projects/tonylefler-web/node_modules/rehype-slug/index.js";

// rehype-lead.ts
import { visit as visit2 } from "file:///Users/tonylefler/projects/tonylefler-web/node_modules/unist-util-visit/index.js";
function rehypeLead() {
  return async (tree) => {
    visit2(tree, "element", (node) => {
      if (node.tagName === "p" && node.children.length > 0 && node.children[0].type === "text" && node.children[0].value.startsWith("::")) {
        node.children[0].value = node.children[0].value.replace(/^::\s*/, "");
        node.properties = { ...node.properties, className: "lead" };
      }
    });
  };
}

// vite.config.ts
import { iconsSpritesheet } from "file:///Users/tonylefler/projects/tonylefler-web/node_modules/vite-plugin-icons-spritesheet/dist/index.mjs";
import kebabCase from "file:///Users/tonylefler/projects/tonylefler-web/node_modules/lodash/kebabCase.js";
var __vite_injected_original_dirname = "/Users/tonylefler/projects/tonylefler-web";
var vite_config_default = defineConfig({
  resolve: {
    alias: {
      "stem-ui": path.resolve(__vite_injected_original_dirname, "app/common")
    }
  },
  plugins: [
    iconsSpritesheet({
      withTypes: true,
      typesOutputFile: path.resolve(__vite_injected_original_dirname, "app/types/icon-gen.ts"),
      inputDir: path.resolve(__vite_injected_original_dirname, "icons"),
      outputDir: path.resolve(__vite_injected_original_dirname, "public"),
      fileName: "icons.svg",
      formatter: "prettier",
      iconNameTransformer: (fileName) => kebabCase(fileName)
    }),
    {
      ...mdx({
        rehypePlugins: [rehypeShiki, rehypeSlug, rehypeLead]
      }),
      enforce: "pre"
    },
    remix(),
    tsconfigPaths()
  ],
  clearScreen: false
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
